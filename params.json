{
  "name": "HDPHMM lib",
  "tagline": "This C++ code implements several nonparametric Bayesian algorithms including: HDPHMM, DHDPHMM, HDP and DPM.",
  "body": "# HDPHMM LIB \r\n### Amir Harati 2016 \r\n### This code can be used as it is. No  support will be provided.\r\n\r\n### **If using this code, please cite at least one of the followings:**\r\n\r\nHarati Nejad Torbati, A. H., & Picone, J. (2016). **A Doubly Hierarchical Dirichlet Process Hidden Markov Model with a Non-Ergodic Structure**. Audio, Speech, and Language Processing, IEEE/ACM Transactions on, 24(1), 174-184.\r\n[https://www.isip.piconepress.com/publications/journals_refereed/2016/ieee_aslp/dhdphmm/paper_double_v22.pdf](https://www.isip.piconepress.com/publications/journals_refereed/2016/ieee_aslp/dhdphmm/paper_double_v22.pdf)\r\n\r\nHarati Nejad Torbati, A. H., Picone, J., & Sobel, M. (2014).**A Left-to-Right HDP-HMM with HDPM Emissions**. 48th Annual Conference on  on Information Sciences and Systems (CISS).\r\n[https://www.isip.piconepress.com/publications/conference_proceedings/2014/ciss/hdp_hmm/paper_v08.pdf](https://www.isip.piconepress.com/publications/conference_proceedings/2014/ciss/hdp_hmm/paper_v08.pdf)\r\n\r\nHarati Nejad Torbati, A. (2015). **Nonparametric Bayesian Approaches for Acoustic Modeling**. Temple University. Retrieved from http://www.isip.piconepress.com/publications/phd_dissertations/2015/nb_acoustic_modeling/thesis/\r\n\r\n# Quick Start:\r\n\r\nThis code is a part of my PhD dissertation and implements HDPHMM(fox et al.,2011) and DHDPHMM (harati et al.,2014,2015,2016). It also can be used to implement DPM and HDP.\r\n\r\nNote 1: DHDPHMM is also known as HDPHMM with HDPM emissions.\r\nNote 2: This code support ergodic/non-ergodic structures for both HDPHMM/DHDPHMM.\r\nNote 3: The inference algorithm is based on block-sampler proposed by Fox et al.(2011) with necessary extenstions to support DHDPHMM.\r\n  \r\nThe code is written using ISIP Fundamental Class (IFC); However since IFC is no longer supported I decided to make a small library (still using some of the IFC classes) that can easily get compiled on most systems. The code is tested on RedHat (64  bit) and Ubuntu (both 32 bit/64 bit). This code also supports openMP and therefore can use multiple cores if available.\r\nCurrently only one  tool  (isip_hdphmm_train) is provided that can:\r\n1- train  HDPHMM/DHDPHMM and DPM/HDP models.   \r\n2- Decode the models.\r\n3- Find optimum path in a model given the observation.\r\n\r\nAlternatively, one can use the library to write their own code that use the functionality provided in this package to implement different nonparametric Bayesian models (for example, it is very easy to write a code that use DPM model but even more interestingly, one can extends the current model to completely new ones. For example, it is easy to replace Gaussian distributions in HDPHMM/DHDPHMM with other type of distributions).  \r\n\r\n## Installation:\r\n1- Download the hdpdhmm_lib (either zip code or clone it using git).\r\n2- Go to hdphmm_lib  directory.\r\n3- Type: source ISIP_BASE_ENV.sh\r\n4- Type: make depend\r\n5- Type: make install\r\n\r\nNow, everything should be ready to use.\r\n\r\n## Example usages:\r\n\r\n### usage 1(train):\r\n\r\nisip_hdphmm_train -params_file params.sof -train_file train.db  -itr $itr -raw_model raw_model  -final_model final_model -burn_in $burnin\r\n\r\n where:\r\n +**train.db** is a database file (look at class/mmedia/Database.h). In the following sections, I describe the format of database file that user can use to introduce data-points to the algorithm.\r\n +**$burnin** is the number of iterations to be discarded. \r\n +**$itr** is the number of iterations.\r\n +**params.sof** is the parameter file (see below). The command line values overwrite values in this file.\r\n +**raw_model **is the file that record the raw model (the model includes internal states and can be used to resume learning).\r\n +**final_model **is the final model ( does not includes internal values).\r\n\r\nif  we want to to **continue** from a saved model (should be saved in raw format):\r\nisip_hdphmm_train -params_file params.sof -train_file train.db  -itr $itr -raw_model raw_model  -final_model final_model -load old_raw_model -burn_in $burnin\r\n\r\nwhere:\r\n **old_raw_model** is the stored raw model.\r\n\r\n### usage 2 (decode):\r\n  isip_hdphmm_train -final_model final_model -log_likelihood eval.db\r\nwhere:\r\n **eval.db** is database contains data to be evaluated.\r\n\r\n This command  read a final model in final_model and compute likelihood of all data points in eval.db and print them in the screen.\r\n\r\n### usage 3 (Viterbi Path/State)\r\n\r\nisip_hdphmm_train -final_model final_model -alignment decode.db  -alignment_algorithm viterbi -alignment_dir out_dir -alignment_time frame -alignment_mode state\r\n\r\nwhere:\r\n **-alignment** is the dataset we want to find the Viterbi path for. \r\n **-alignment_algorithm** is the algorithm used (in this case viterbi but we also support forward-backward algorithm).\r\n **-alignment_dir ** is the output directory. We generate one file per input sequence (in case of HDPHMM/DHDPHMM each sequence is a datapoint). In speech recognition a sequence is an utterance but in other applications it might represent other things.\r\n **-alignment_time** is the time unit (in this case frame).\r\n **-alignment_mode**  is the mode (in this case state). \r\n\r\n### usage 4 (forward algorithm path generate posteriorgram probabilities over state)\r\n\r\nisip_hdphmm_train -final_model final_model -alignment train.db  -alignment_algorithm forward -alignment_dir out_dir -alignment_time frame -alignment_mode state \r\n\r\nThis is similar to usage 3 but instead of Viterbi we have used Forward-backward algorithm and the output is posterior-gram (probability vector over different states) rather than a deterministic alignment.\r\n\r\n## Example:\r\ngo to util/speech/isip_hdphmm_train/\r\ntype:\r\nisip_hdphmm_train.exe -params_file params.sof -train_file train_zh.db -itr 10 -burn_in 5 -final_model fin_model  -raw_model raw_model\r\n\r\nThis will train a model phoneme zh with 10 iterations and discard the first 5 iterations. \r\n\r\n## Param file:\r\nKz = 10; -> maximum number of states (change the value to have models with higher or lower upper bound). \r\n\r\nKs= 10; -> maximum number of components per state.\r\n\r\nemission_type = DPM ; -> Emission type for HMM models. If we use DPM emissions we obtain HDPHMM model.\r\nOR\r\nemission_type = HDP; -> Using HDP emissions we obtain DHDPHMM model.\r\n\r\nhmm_parameter = alpha_a,alpha_b,beta_a,beta_b,c,d; (refer to Fox  et al.2011 paper)\r\n\r\nemission_parameter (for HDPHMM or when emission_type = DPM):Ks,prior_type,sigma_a,sigma_b,pseudo mean,degree_of_freedom\r\nOR\r\nemission_parameter (for DHDPHMM or when emission_type = HDP):Ks,[Ks2],prior_type,sigma_a,sigma_b,landa_a,landa_b,pseudo mean,degree_of_freedom\r\nwhere: \r\n _Ks:_ maximum number of Gaussians in the whole model (which can also be for each state)\r\n _Ks2:_ is optional and should be less or equal to Ks. it specify the maximum number of  Gaussian per state\r\n(For more details  refer to Harati 2015, Harati et al. 2014, Harati and Picone 2016).\r\n\r\n\r\nprior_type: 0 =NIW  1:IW-N 2:IW-N tied\r\n\r\npseudo_mean: just used for NIW .\r\n(refer to Fox et al. 2011  for details).\r\n\r\n\r\n# References:\r\n## HDPHMM/HDP/DPM:\r\nFox, E., Sudderth, E., Jordan, M., & Willsky, A. (2011). A Sticky HDP-HMM with Application to Speaker Diarization. The Annalas of Applied Statistics, 5(2A), 1020\r\nTeh, Y., Jordan, M., Beal, M., & Blei, D. (2006). Hierarchical Dirichlet Processes. Journal of the American Statistical Association, 101(47), 1566\r\n\r\n## DHDPHMM:\r\n\r\nHarati Nejad Torbati, A. H., & Picone, J. (2016). A Doubly Hierarchical Dirichlet Process Hidden Markov Model with a Non-Ergodic Structure. Audio, Speech, and Language Processing, IEEE/ACM Transactions on, 24(1), 174-184.\r\n\r\nHarati Nejad Torbati, A. H., Picone, J., & Sobel, M. (2014). A Left-to-Right HDP-HMM with HDPM Emissions. 48th Annual Conference on  on Information Sciences and Systems (CISS).\r\n\r\nHarati Nejad Torbati, A. (2015). Nonparametric Bayesian Approaches for Acoustic Modeling. Temple University. Retrieved from http://www.isip.piconepress.com/publications/phd_dissertations/2015/nb_acoustic_modeling/thesis/\r\n\r\n\r\n\r\n# Tutorials\r\n\r\n[ to complete later]\r\n\r\n## Installation\r\nThe code is intended for Linux machines. I have compiled and used the code on Ubuntu (virtual machine) and RedHat (Cluster). It might also get compiled in other flavors or even Mac OS  but has never been tested by me.\r\n\r\n1-After downloading the code (or cloning it) go to the main directory, type:\r\ncd hdphmm_lib\r\n2-Now you have to run a shell script that defines necessary variables for compile time, type:\r\nsource ISIP_BASE_ENV.sh\r\n3-In the terminal, type: \r\nmake\r\n4- Now type:\r\nmake install\r\n5- You can find a binary named \"isip_hdphmm_train\"  under bin/linux-gnu/  and library files will be installed under lib/linux-gnu. isip_hdphmm_train is a command-line tool that can be used to train and decode (finding VIterbi path and likelihood) for HDPHMM and DHDPHMM models (in addition to DPM and HDP models). [Notice: the tool  name is misleading since it can do both  training and decoding for  not only HDPHMM but all the other models.]\r\nIn addition to the command line tool (which does not need any C++ knowledge or any programming). You can also use the libraries and include files to develop your own specific models/applications that are not covered by the command-line tool.\r\n\r\nIn the next sections, I will give examples about usage of the command-line tool to model DPM, HDP, HDPHMM and DHDPHMM.\r\nAlso notice that if your computer has more than one core/CPU  and  support the openMP you will be able to run the tool in parallel and accelerate the computation time proportional to the number of cores you have on your system. \r\n\r\n[to complete later]\r\n\r\n## Dirichlet Process Mixture (DPM) using HDPHMM Lib\r\n\r\n[to complete later]\r\n\r\n## Hierarchical Dirichlet Process (HDP) using HDPHMM Lib\r\n\r\n[to complete later]\r\n\r\n## HDP-HMM  using HDPHMM Lib\r\n\r\n[to complete later]\r\n\r\n## DHDP-HMM using HDPHMM Lib\r\n\r\n[to complete later]\r\n\r\n## Using HDPHMM LIB with HTK/KALDI\r\n\r\n[to complete later]\r\n\r\n## Examples\r\n\r\n### TIMIT Classification\r\n[to complete later]\r\n\r\n### Speech segmentation\r\n[to complete later]\r\n\r\n### Automatic learning of Acoustic units\r\n[to complete later]\r\n\r\n### Query based Spoken Term Detection (STD) \r\n[to complete later]\r\n\r\n### Other applications\r\n[to complete later]\r\n\r\n\r\n# Extending the code\r\n[to complete later]\r\n\r\n\r\n\r\n  \r\n\r\n\r\n \r\n\r\n ",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}